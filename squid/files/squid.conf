# This file managed by Salt , do not edit by hand!!
{%- set cfg_squid = salt['pillar.get']('squid', {}) -%}
{%- set example_rule = cfg_squid.get('example_rule', True) -%}
{% from "squid/map.jinja" import map with context %}
#
# Recommended minimum configuration:
#

# Example rule allowing access from your local networks.
# Adapt to list your (internal) IP networks from where browsing
# should be allowed
{%- for src in cfg_squid.get('allowed_src', ['10.0.0.0/8', '172.16.0.0/12', '192.168.0.0/16', 'fc00::/7', 'fe80::/10']) %}
acl localnet src {{ src }}
{%- endfor %}

{%- if cfg_squid.get('deprecated_localhost_acl', False) %}
acl localhost src 127.0.0.1
acl localhost src ::1
{%- endif %}

acl manager url_regex -i ^cache_object:// /squid-internal-mgr/

acl SSL_ports port 443

{%- for port in cfg_squid.get('safe_ports', ['80', '21', '443', '70', '210', '1025-65535', '280', '488', '591', '777']) %}
acl Safe_ports port {{ port }}
{%- endfor %}

acl CONNECT method CONNECT

# Set cache manager user and password
{%- if cfg_squid.get('cache_mgr_user', False) %}
cache_mgr {{ cfg_squid.get('cache_mgr_user', {}) }}
{%- else %}
# cache manager user was not defined
{%- endif %}

{%- if cfg_squid.get('cache_mgr_password', False) %}
cachemgr_passwd {{ cfg_squid.get('cache_mgr_password', {}) }} all
{%- else %}
# cache manager password was not defined
{%- endif %}

#
# Recommended minimum Access Permission configuration:
#
# Deny requests to certain unsafe ports
http_access deny !Safe_ports

# Deny CONNECT to other than secure SSL ports
http_access deny CONNECT !SSL_ports

# Only allow cachemgr access from localhost
http_access allow localhost manager
http_access deny manager

# We strongly recommend the following be uncommented to protect innocent
# web applications running on the proxy server who think the only
# one who can access services on "localhost" is a local user
#http_access deny to_localhost

#
# INSERT YOUR OWN RULE(S) HERE TO ALLOW ACCESS FROM YOUR CLIENTS
#
{% if example_rule %}
# Example rule allowing access from your local networks.
# Adapt localnet in the ACL section to list your (internal) IP networks
# from where browsing should be allowed
http_access allow localnet
http_access allow localhost
{%  endif %}

{%- for acl, ports in cfg_squid.get('port_acl', {}).items() %}
{%- for port in ports %}
acl {{acl}} port {{port}}
{%- endfor %}
{% endfor %}

{%- for acl, sources in cfg_squid.get('src_acl', {}).items() %}
{%- for src in sources %}
acl {{acl}} src {{src}}
{%- endfor %}
{% endfor %}

{%- for acl, destinations in cfg_squid.get('dst_acl', {}).items() %}
{%- for dst in destinations %}
acl {{acl}} dst {{dst}}
{%- endfor %}
{% endfor %}

{%- for acl, domains in cfg_squid.get('dstdomain_acl', {}).items() %}
{%- for domain in domains %}
acl {{acl}} dstdomain {{domain}}
{%- endfor %}
{% endfor %}

{%- for acl, domains in cfg_squid.get('url_regex_acl', {}).items() %}
{%- for domain in domains %}
acl {{acl}} url_regex {{domain}}
{%- endfor %}
{% endfor %}

{%- for rule in cfg_squid.get('http_access', []) %}
http_access {{rule}}
{%- endfor %}

# And finally deny all other access to this proxy
http_access deny all

# Squid normally listens to port 3128
{%- for http_port in cfg_squid.get('http_port', ['3128']) %}
http_port {{http_port}}
{%- endfor %}

{%- for https_port in cfg_squid.get('https_port', []) %}
https_port {{https_port}}
{%- endfor %}

# Uncomment and adjust the following to add a disk cache directory.
#cache_dir ufs /var/cache/squid 256 16 256
{{ cfg_squid.get('cache_dir', '') }}

# Leave coredumps in the first cache dir
coredump_dir {{map.cache}}

#
# Add any of your own refresh_pattern entries above these.
#
refresh_pattern ^ftp:		1440	20%	10080
refresh_pattern ^gopher:	1440	0%	1440
refresh_pattern -i (/cgi-bin/|\?) 0	0%	0
refresh_pattern .		0	20%	4320

{%- set extra_conf = cfg_squid.get('extra_configuration', '') %}
{%- if extra_conf is string %}
{{ extra_conf }}
{%- elif extra_conf is iterable and value is not string %}
{%- for item in extra_conf %}
{{ item }}
{%- endfor %}
{%- endif %}

visible_hostname {{ cfg_squid.get('visible_hostname', salt['grains.get']('id')) }}
